package ${packageName}.api;

import java.util.List;
import com.ptac.common.entity.PageEntity;
import com.ptac.common.result.Result;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import org.springframework.cloud.openfeign.FeignClient;
import org.springframework.web.bind.annotation.*;
import ${packageName}.api.vo.${ClassName}Vo;
import ${packageName}.api.vo.${ClassName}ParamVo;
#if($table.crud || $table.sub)
#elseif($table.tree)
import com.ruoyi.common.utils.StringUtils;
import com.ruoyi.common.core.domain.Ztree;
#end

/**
 * ${functionName}
 *
 * @author ${author}
 * @date ${datetime}
 */
@RequestMapping("/${className}")
@Api(value = "${functionName}", tags = "${functionName}")
@FeignClient(name = "${moduleName}", path = "/${moduleName}/")
public interface I${ClassName}Inter
{
#if($table.crud || $table.sub)

    /**
     * 查询${functionName}
     *
     * @param ${pkColumn.javaField} ${functionName}ID
     * @return ${functionName}
     */
    @PostMapping("/getById")
    @ApiOperation(value = "根据id查询")
    Result<${ClassName}Vo> getById(${pkColumn.javaType} ${pkColumn.javaField});

    /**
     * 查询${functionName}列表
     *
     * @param ${className}ParamVo ${functionName}
     * @return ${functionName}集合
     */
    @PostMapping("/listByEntity")
    @ApiOperation(value = "查询列表")
    Result<List<${ClassName}Vo>> listByEntity(@RequestBody ${ClassName}ParamVo ${className}ParamVo);

#elseif($table.tree)
    /**
     * 查询${functionName}树列表
     */
    @RequiresPermissions("${permissionPrefix}:list")
    @PostMapping("/list")
    @ResponseBody
    List<${ClassName}> list(${ClassName}ParamVo ${className}ParamVo)
    {
        List<${ClassName}> list = ${className}Service.select${ClassName}List(${className});
        return list;
    }
#end

    /**
     * 新增${functionName}
     *
     * @param ${className}ParamVo ${functionName}
     * @return 结果
     */
    @PostMapping(value = "/save")
    @ApiOperation(value = "新增")
    Result save(${ClassName}ParamVo ${className}ParamVo);

    /**
     * 修改${functionName}
     *
     * @param ${className}ParamVo ${functionName}
     * @return 结果
     */
    @PostMapping(value = "/updateById")
    @ApiOperation(value = "更新")
    Result updateById(${ClassName}ParamVo ${className}ParamVo);


#if($table.crud || $table.sub)

    /**
     * 批量删除${functionName}
     *
     * @param ids 需要删除的数据ID
     * @return 结果
     */
    @PostMapping(value = "/removeByIds")
    @ApiOperation(value = "批量删除")
    Result removeByIds(Long[] ids);

    /**
     * 删除${functionName}信息
     *
     * @param ${pkColumn.javaField} ${functionName}ID
     * @return 结果
     */
    @PostMapping(value = "/removeById")
    @ApiOperation(value = "删除")
    Result removeById(Long id);

    /**
     * 分页查询${functionName}列表
     *
     * @param ${className}ParamVo ${functionName}
     * @return ${functionName}集合
     */
    @PostMapping(value = "/page")
    @ApiOperation(value = "分页查询")
    Result<PageResult<${ClassName}Vo>> page(@RequestBody PageEntity<${ClassName}ParamVo> ${className}ParamVo);
#end
#if($table.tree)

    /**
     * 选择${functionName}树
     */
#set($BusinessName=$businessName.substring(0,1).toUpperCase() + ${businessName.substring(1)})
    @GetMapping(value = { "/select${BusinessName}Tree/{${pkColumn.javaField}}", "/select${BusinessName}Tree/" })
    public String select${BusinessName}Tree(@PathVariable(value = "${pkColumn.javaField}", required = false) Long ${pkColumn.javaField}, ModelMap mmap)
    {
        if (StringUtils.isNotNull(${pkColumn.javaField}))
        {
            mmap.put("${className}", ${className}Service.select${ClassName}ById(${pkColumn.javaField}));
        }
        return prefix + "/tree";
    }

    /**
     * 加载${functionName}树列表
     */
    @GetMapping("/treeData")
    @ResponseBody
    public List<Ztree> treeData()
    {
        List<Ztree> ztrees = ${className}Service.select${ClassName}Tree();
        return ztrees;
    }
#end
}
